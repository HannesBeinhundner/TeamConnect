generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Milestone {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(256)
  date            DateTime
  configurationId Int           @unique
  configuration   Configuration @relation(fields: [configurationId], references: [id])
}

model Configuration {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  milestones Milestone?
}

model Event {
  id                       String             @id @default(cuid())
  name                     String             @db.VarChar(256)
  isPartOfEvent            Boolean            @default(true)
  hasMilestones            Boolean            @default(false)
  adminEmail               String?
  user                     User?              @relation(fields: [adminEmail], references: [email])
  EventExpertise           EventExpertise[]
  EventProjectType         EventProjectType[]
  Project                  Project[]
  User_User_eventIdToEvent User[]             @relation("User_eventIdToEvent")
}

model EventProjectType {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(256)
  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, name], name: "eventId_name")
}

model EventExpertise {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(256)
  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, name], name: "eventId_name")
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(256)
  type        String  @db.VarChar(256)
  description String
  skills      String
  file        String  @db.VarChar(256)
  link        String  @db.VarChar(256)
  status      String  @db.VarChar(256)
  image       String  @db.VarChar(256)
  eventId     String?
  event       Event?  @relation(fields: [eventId], references: [id])
  User        User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String    @id @default(cuid())
  email                     String?   @unique
  image                     String?
  name                      String?
  projectId                 Int?
  projectAdmin              Boolean   @default(false)
  expertise                 String?
  link                      String?
  description               String?
  eventId                   String?
  accounts                  Account[]
  Event                     Event[]
  sessions                  Session[]
  project                   Project?  @relation(fields: [projectId], references: [id])
  Event_User_eventIdToEvent Event?    @relation("User_eventIdToEvent", fields: [eventId], references: [id], onDelete: SetNull, map: "public_User_eventId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
