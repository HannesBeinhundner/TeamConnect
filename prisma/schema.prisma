generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Milestone {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(256)
  date            DateTime
  configurationId Int           @unique
  configuration   Configuration @relation(fields: [configurationId], references: [id])
}

model Configuration {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  milestones Milestone[]
}

model Project {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(256)
  type        String @db.VarChar(256)
  supervisor  String @db.VarChar(256)
  description String @db.Text
  skills      String @db.Text
  file        String @db.VarChar(256)
  link        String @db.VarChar(256)
  status      String @db.VarChar(256)
  image       String @db.VarChar(256)
  User        User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  created_at        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstname     String?
  lastname      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  status        String?
  department    String?
  studies       String?
  username      String?
  major         String?
  portfolio     String?
  description   String?
  projectId     Int?
  projectAdmin  Boolean   @default(false)
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
